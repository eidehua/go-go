package main

import "fmt"

// fib returns a function that returns
// successive Fibonacci numbers.
func fib() func() int {
	a, b := 0, 1
	//outer function only initialized the variables
	return func() int {
		a, b = b, a+b
		return a
	}
}

func main() {
	f := fib()
	// Function calls are evaluated left-to-right.
	fmt.Println(f(), f(), f(), f(), f(), f(), f())
	fmt.Println(fib()(), fib()(), fib()(), fib(), fib(), fib(), fib())
	fmt.Println(f)
}
//fib() returns a function address
//fib()() will then run the function at the function address
//f = fib() means f is a pointer to the function
//f's value is the function address
//f() is the NOT the same as fib()()!!!
//fib()() creates a new function every time fib() is called, then we run that new function, (so ones are created)
//f points to a specific new function created by fib(), so consequtive calls to f() f(), will keep using that same function
